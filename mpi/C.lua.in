------------------------------------------------------------------------------
-- Generate C declarations for use with a foreign function interface (FFI).
-- Copyright © 2013–2015 Peter Colberg.
-- Distributed under the MIT license. (See accompanying file LICENSE.)
------------------------------------------------------------------------------

local gcc = require("gcc")
local cdecl = require("gcc.cdecl")
local fficdecl = require("ffi-cdecl")

-- Output generated assembly to /dev/null
gcc.set_asm_file_name(gcc.HOST_BIT_BUCKET)

-- Captured C declarations.
local decls = {}
-- Type declaration identifiers.
local types = {}

-- Parse C declaration from capture macro.
gcc.register_callback(gcc.PLUGIN_PRE_GENERICIZE, function(node)
  local decl, id = fficdecl.parse(node)
  if decl then
    if decl:class() == "type" or decl:code() == "type_decl" then
      types[decl] = id
    end
    table.insert(decls, {decl = decl, id = id})
  end
end)

-- MPI C handle types.
local handles = {
  MPI_Comm = true,
  MPI_Datatype = true,
  MPI_Errhandler = true,
  MPI_File = true,
  MPI_Group = true,
  MPI_Info = true,
  MPI_Message = true,
  MPI_Op = true,
  MPI_Request = true,
  MPI_Win = true,
}

-- Formats the given declaration as a string of C code.
local function format(decl, id)
  if decl:class() == "constant" then
    return "static const int " .. id .. " = " .. decl:value()
  end
  if handles[id] then
    local mode = decl:type():mode()
    return "typedef struct _" .. id .. " *__attribute__((mode(" .. mode .. "))) " .. id
  end
  return cdecl.declare(decl, function(node)
    if node == decl then return id end
    return types[node]
  end)
end

-- Output captured C declarations to Lua file.
gcc.register_callback(gcc.PLUGIN_FINISH_UNIT, function()
  local result = {}
  for i, decl in ipairs(decls) do
    result[i] = format(decl.decl, decl.id) .. ";\n"
  end
  local f = assert(io.open(arg.output, "w"))
  f:write([=[
------------------------------------------------------------------------------
-- MPI for Lua.
-- Copyright © 2013–2015 Peter Colberg.
-- Distributed under the MIT license. (See accompanying file LICENSE.)
------------------------------------------------------------------------------

local ffi = require("ffi")

ffi.cdef[[
]=], table.concat(result), [=[
]]

-- Dynamically link the MPI library into the global namespace if needed.
local C = ffi.C
if not pcall(function() return ffi.C.MPI_Init end) then
  C = ffi.load("]=], arg.libname, [=[", true)
end
return C
]=])
  f:close()
end)
